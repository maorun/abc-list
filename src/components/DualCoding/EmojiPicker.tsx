import React, {useState} from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import {Button} from "@/components/ui/button";
import {Input} from "@/components/ui/input";

interface EmojiPickerProps {
  isOpen: boolean;
  onClose: () => void;
  onSelect: (emoji: string) => void;
  currentEmoji?: string;
}

// Categorized emoji collections for learning
const EMOJI_CATEGORIES = {
  Emotionen: [
    "üòÄ",
    "üòÉ",
    "üòÑ",
    "üòÅ",
    "üòä",
    "üòç",
    "ü•∞",
    "üòò",
    "üòó",
    "üòô",
    "üòö",
    "ü§ó",
    "ü§©",
    "ü§î",
    "üßê",
    "üòé",
    "ü§ì",
    "üòè",
    "üòí",
    "üòû",
    "üòî",
    "üòü",
    "üòï",
    "üôÅ",
    "üò£",
    "üòñ",
    "üò´",
    "üò©",
    "ü•∫",
    "üò¢",
  ],
  Natur: [
    "üå±",
    "üåø",
    "üçÄ",
    "üåæ",
    "üå≥",
    "üå≤",
    "üå¥",
    "üåµ",
    "üå∑",
    "üå∏",
    "üåπ",
    "üå∫",
    "üåª",
    "üåº",
    "üåà",
    "‚≠ê",
    "‚ú®",
    "üí´",
    "‚òÄÔ∏è",
    "üåô",
    "üåç",
    "üåé",
    "üåè",
    "üî•",
    "üíß",
    "üåä",
    "‚ö°",
    "‚ùÑÔ∏è",
    "‚òÉÔ∏è",
    "üå™Ô∏è",
  ],
  Tiere: [
    "üê∂",
    "üê±",
    "üê≠",
    "üêπ",
    "üê∞",
    "ü¶ä",
    "üêª",
    "üêº",
    "üê®",
    "üêØ",
    "ü¶Å",
    "üêÆ",
    "üê∑",
    "üê∏",
    "üêµ",
    "üêî",
    "üêß",
    "üê¶",
    "üê§",
    "ü¶Ü",
    "ü¶Ö",
    "ü¶â",
    "ü¶á",
    "üê∫",
    "üêó",
    "üê¥",
    "ü¶Ñ",
    "üêù",
    "üêõ",
    "ü¶ã",
  ],
  Essen: [
    "üçé",
    "üçä",
    "üçã",
    "üçå",
    "üçâ",
    "üçá",
    "üçì",
    "üçà",
    "üçí",
    "üçë",
    "ü•≠",
    "üçç",
    "ü••",
    "ü•ù",
    "üçÖ",
    "ü•ë",
    "ü•¶",
    "ü•¨",
    "ü•í",
    "üå∂Ô∏è",
    "üåΩ",
    "ü•ï",
    "ü•î",
    "üç†",
    "üçû",
    "ü•ê",
    "ü•ñ",
    "ü•®",
    "üßÄ",
    "ü•ö",
  ],
  Objekte: [
    "üìö",
    "üìñ",
    "üìù",
    "‚úèÔ∏è",
    "‚úíÔ∏è",
    "üñäÔ∏è",
    "üñçÔ∏è",
    "üìå",
    "üìç",
    "üîñ",
    "üíº",
    "üìÅ",
    "üìÇ",
    "üìä",
    "üìà",
    "üìâ",
    "üóÇÔ∏è",
    "üóÉÔ∏è",
    "üóÑÔ∏è",
    "üìã",
    "üìÜ",
    "üìÖ",
    "üóìÔ∏è",
    "üìá",
    "üóíÔ∏è",
    "üó≥Ô∏è",
    "‚è∞",
    "‚è±Ô∏è",
    "‚è≤Ô∏è",
    "üïê",
  ],
  Symbole: [
    "‚ù§Ô∏è",
    "üíõ",
    "üíö",
    "üíô",
    "üíú",
    "üñ§",
    "ü§ç",
    "ü§é",
    "üíî",
    "‚ù£Ô∏è",
    "üíï",
    "üíû",
    "üíì",
    "üíó",
    "üíñ",
    "üíò",
    "üíù",
    "‚úÖ",
    "‚ùå",
    "‚≠ï",
    "üî¥",
    "üü†",
    "üü°",
    "üü¢",
    "üîµ",
    "üü£",
    "üü§",
    "‚ö´",
    "‚ö™",
    "üî∫",
  ],
  Wissenschaft: [
    "üî¨",
    "üß™",
    "üß¨",
    "‚öóÔ∏è",
    "üî≠",
    "üå°Ô∏è",
    "üíâ",
    "ü©∫",
    "‚öõÔ∏è",
    "üß≤",
    "üîã",
    "üí°",
    "üî¶",
    "üïØÔ∏è",
    "üóúÔ∏è",
    "‚öôÔ∏è",
    "üî©",
    "‚õìÔ∏è",
    "üß∞",
    "üî®",
  ],
  Transport: [
    "üöó",
    "üöï",
    "üöô",
    "üöå",
    "üöé",
    "üèéÔ∏è",
    "üöì",
    "üöë",
    "üöí",
    "üöê",
    "üöö",
    "üöõ",
    "üöú",
    "üö≤",
    "üõ¥",
    "üõπ",
    "üõµ",
    "üèçÔ∏è",
    "‚úàÔ∏è",
    "üöÄ",
  ],
} as const;

type EmojiCategory = keyof typeof EMOJI_CATEGORIES;

const handleCategoryClickAction =
  (
    category: EmojiCategory | "alle",
    setSelectedCategory: (cat: EmojiCategory | "alle") => void,
  ) =>
  () => {
    setSelectedCategory(category);
  };

const handleEmojiClickAction =
  (emoji: string, onSelect: (emoji: string) => void, onClose: () => void) =>
  () => {
    onSelect(emoji);
    onClose();
  };

const handleClearAction =
  (onSelect: (emoji: string) => void, onClose: () => void) => () => {
    onSelect("");
    onClose();
  };

const handleCustomEmojiChangeAction =
  (setCustomEmoji: (emoji: string) => void) =>
  (e: React.ChangeEvent<HTMLInputElement>) => {
    setCustomEmoji(e.target.value);
  };

const handleCustomEmojiSubmitAction =
  (
    customEmoji: string,
    onSelect: (emoji: string) => void,
    onClose: () => void,
  ) =>
  () => {
    if (customEmoji.trim()) {
      onSelect(customEmoji.trim());
      onClose();
    }
  };

export function EmojiPicker({
  isOpen,
  onClose,
  onSelect,
  currentEmoji,
}: EmojiPickerProps) {
  const [selectedCategory, setSelectedCategory] = useState<
    EmojiCategory | "alle"
  >("alle");
  const [customEmoji, setCustomEmoji] = useState("");

  const displayedEmojis = React.useMemo(() => {
    if (selectedCategory === "alle") {
      return Object.values(EMOJI_CATEGORIES).flat();
    }
    return EMOJI_CATEGORIES[selectedCategory];
  }, [selectedCategory]);

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>Emoji w√§hlen</DialogTitle>
          <DialogDescription>
            W√§hle ein Emoji f√ºr visuelle Assoziation (Dual-Coding)
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Custom Emoji Input */}
          <div className="flex gap-2">
            <Input
              type="text"
              placeholder="Eigenes Emoji eingeben..."
              value={customEmoji}
              onChange={handleCustomEmojiChangeAction(setCustomEmoji)}
              className="flex-1"
              maxLength={2}
            />
            <Button
              onClick={handleCustomEmojiSubmitAction(
                customEmoji,
                onSelect,
                onClose,
              )}
              disabled={!customEmoji.trim()}
            >
              Verwenden
            </Button>
          </div>

          {/* Category Filter */}
          <div className="flex flex-wrap gap-2">
            <Button
              variant={selectedCategory === "alle" ? "default" : "outline"}
              size="sm"
              onClick={handleCategoryClickAction("alle", setSelectedCategory)}
            >
              Alle
            </Button>
            {(Object.keys(EMOJI_CATEGORIES) as EmojiCategory[]).map(
              (category) => (
                <Button
                  key={category}
                  variant={
                    selectedCategory === category ? "default" : "outline"
                  }
                  size="sm"
                  onClick={handleCategoryClickAction(
                    category,
                    setSelectedCategory,
                  )}
                >
                  {category}
                </Button>
              ),
            )}
          </div>

          {/* Emoji Grid */}
          <div className="grid grid-cols-8 sm:grid-cols-10 gap-2 min-h-[200px]">
            {displayedEmojis.map((emoji, index) => (
              <button
                key={`${emoji}-${index}`}
                onClick={handleEmojiClickAction(emoji, onSelect, onClose)}
                className={`flex items-center justify-center p-2 rounded-lg border-2 transition-all hover:bg-blue-50 hover:border-blue-500 text-2xl ${
                  currentEmoji === emoji
                    ? "bg-blue-100 border-blue-500"
                    : "border-gray-200"
                }`}
              >
                {emoji}
              </button>
            ))}
          </div>

          {/* Actions */}
          <div className="flex gap-2 justify-end pt-4 border-t">
            {currentEmoji && (
              <Button
                variant="outline"
                onClick={handleClearAction(onSelect, onClose)}
              >
                Emoji entfernen
              </Button>
            )}
            <Button variant="outline" onClick={onClose}>
              Abbrechen
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}
